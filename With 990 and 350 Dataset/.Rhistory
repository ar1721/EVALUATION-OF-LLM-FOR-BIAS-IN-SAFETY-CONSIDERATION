backend = 'rstan',
threads = threading(8),
cores = 4
)
STAN_OPENCL=true
library(cmdstanr)
library(tidybayes)
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
library(loo)
# #########################Reading dices dataset#######################
dices1=read.csv("https://raw.githubusercontent.com/google-research-datasets/dices-dataset/main/350/diverse_safety_adversarial_dialog_350.csv")
dices=dices1
# ###################Turning Q_Overall rating to numeric from character################
dices$Q_overall <- factor(dices$Q_overall, levels = c("No", "Unsure", "Yes"), ordered = TRUE)
###################Models###########################
# Create formula objects
formula1 <- Q_overall ~ 1 + (1 | rater_id) + (1 | item_id)
formula2 <- Q_overall ~ rater_raw_race + rater_gender + rater_age+ rater_education+ (1 | rater_id) + (1 | item_id)
formula3 <- Q_overall ~ rater_raw_race + rater_gender + rater_age+ rater_education + degree_of_harm + (1 | rater_id) + (1 | item_id)
formula4 <- Q_overall ~ rater_raw_race * (rater_gender + rater_age+ rater_education) + (1 | rater_id) + (1 | item_id)
formula5 <- Q_overall ~ rater_raw_race * (rater_gender + rater_age+ rater_education + degree_of_harm) + (1 | rater_id) + (1 | item_id)
formula6 <- Q_overall ~ rater_raw_race * (rater_gender + rater_age+ rater_education + degree_of_harm) + (degree_of_harm | rater_id) + (1 | item_id)
formula7 <- Q_overall ~ rater_raw_race +rater_gender + rater_age+ rater_education + degree_of_harm + (degree_of_harm | rater_id) + (1 | item_id)
# Get prior specifications for the models
priors1 <- get_prior(formula1, data = dices, family = cumulative("probit"))
priors2 <- get_prior(formula2, data = dices, family = cumulative("probit"))
priors3 <- get_prior(formula3, data = dices, family = cumulative("probit"))
priors4 <- get_prior(formula4, data = dices, family = cumulative("probit"))
priors5 <- get_prior(formula5, data = dices, family = cumulative("probit"))
priors6 <- get_prior(formula6, data = dices, family = cumulative("probit"))
priors7 <- get_prior(formula7, data = dices, family = cumulative("probit"))
# Create brm models
Model.Intersectional.QS <- brm(
formula = formula5,
data = dices,
family = cumulative("probit"),
prior = priors5,
warmup = 1000,
iter = 2000,
chains = 4,
seed = 42,
backend = 'cmdstanr',
threads = threading(12),
cores = 6
)
.Last.error
set_cmdstan_path(~\)
set_cmdstan_path("")
set_cmdstan_path("~/")
install_cmdstan()
set_cmdstan_path("C:\Users\Aman Raj\Documents\.cmdstan\cmdstan-2.33.1")
set_cmdstan_path("C:/Users/Aman Raj/Documents/.cmdstan/cmdstan-2.33.1")
Model.Intersectional.QS <- brm(
formula = formula5,
data = dices,
family = cumulative("probit"),
prior = priors5,
warmup = 1000,
iter = 2000,
chains = 4,
seed = 42,
backend = 'cmdstanr',
threads = threading(12),
cores = 6
)
cmdstanr_write_stan_file_dir?
Model.Intersectional.QS <- brm(
formula = formula5,
data = dices,
family = cumulative("probit"),
prior = priors5,
warmup = 1000,
iter = 2000,
chains = 4,
seed = 42,
backend = 'cmdstanr',
threads = threading(12),
cores = 6
)
install.packages("OpenCL")
install.packages("OpenCL",,"http://rforge.net/",type="source")
Model.Intersectional.QSGE <- brm(
formula = formula6,
data = dices,
family = cumulative("probit"),
prior = priors6,
warmup = 1000,
iter = 4000,
chains = 4,
seed = 42,
backend = 'rstan',
threads = threading(8),
cores = 4
)
Model.Intersectional.QS <- brm(
formula = formula5,
data = dices,
family = cumulative("probit"),
prior = priors5,
warmup = 1000,
iter = 2000,
chains = 4,
seed = 42,
backend = 'cmdstanr',
threads = threading(12),
cores = 6
)
Model.Intersectional.QS <- brm(
formula = formula5,
data = dices,
family = cumulative("probit"),
prior = priors5,
warmup = 1000,
iter = 2000,
chains = 4,
seed = 42,
backend = 'rstan',
threads = threading(12),
cores = 6
)
library(tidybayes)
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
library(loo)
load("E:/Models/Extended_model/ModelIntersectionalADGender.RData")
load("E:/Models/Extended_model/ModelIntersectionalQSGEGender.RData")
load("E:/Models/Extended_model/ModelIntersectionalQSGender.RData")
load("E:/Models/Extended_model/Fitness/LooModelReplication.RData")
load("E:/Models/Extended_model/Fitness/R2ModelReplication.RData")
load("E:/Models/Extended_model/Fitness/WAICModelReplication.RData")
View(loo_results)
elpd<-list(loo_results$Null_Modelraw$elpd_loo,
loo_results$Linear_AD$elpd_loo,
loo_results$Intersectional_AD$elpd_loo,
loo_results$Linear_QS$elpd_loo,
loo_results$Linear_QSGE$elpd_loo,
loo_results$Intersectional_QS$elpd_loo,
loo_results$Intersectional_QSGE$elpd_loo)
View(elpd)
View(loo_results)
View(elpd)
View(loo_results)
View(r2_results)
View(waic_results)
View(r2_results)
r2_results
loo_results
waic_results
load("E:/Models/Rater_raw_race_model/Fitness/LooModelReplication.RData")
load("E:/Models/Rater_raw_race_model/Fitness/R2ModelReplication.RData")
load("E:/Models/Rater_raw_race_model/Fitness/WAICModelReplication.RData")
r2_results
View(loo_results)
waic_results
loo_results
waic_results
conditional_QS_Intersectional<-conditional_effects(Model.intersectional.AD.Gender)
conditional_AD_Intersectional<-conditional_effects(Model.intersectional.QS.Gender)
conditional_QSGE_Intersectional<-conditional_effects(Model.intersectional.QSGE.Gender)
View(conditional_QS_Intersectional)
View(conditional_AD_Intersectional)
View(conditional_QSGE_Intersectional)
a1=plot(conditional_QS_Intersectional$`rater_gender:rater_raw_race`)
a1=plot(conditional_QS_Intersectional)
cond=conditional_QS_Intersectional$`rater_gender:rater_raw_race`
View(cond)
a1=plot(cond)
View(conditional_QS_Intersectional)
conditional_QS_Intersectional[["rater_gender:rater_raw_race"]][["Q_overall"]]
a1=plot(conditional_QS_Intersectional)
View(cond)
a1=plot(conditional_QS_Intersectional)
cond=conditional_QS_Intersectional$`rater_gender:rater_education`
View(cond)
a1=plot(conditional_QS_Intersectional)
View(conditional_QS_Intersectional)
conditional_QS_Intersectional<-conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE)
View(conditional_QS_Intersectional)
titlex=paste("Probability of No by Gender and ",k)
plotb=plottingBar(m,"rater_raw_race")
library(tidybayes)
library(bayestestR)
library(dplyr)
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
library(loo)
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
plottingBar <- function(m,k) { # create a function with the name my_function
titlex=paste("Probability of No by Gender and ",k)
gr=m$data
gr1=gr[gr$effect2__=="No",]
nrc=length(unique(dices$rater_gender))*length(unique(dices[[k]]))
gr1=gr[1:nrc,]
m=ggplot(gr1, aes(x = rater_gender, y = estimate__*100, fill = get(k), colour = get(k))) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = lower__*100, ymax = upper__*100), width = 0.11, position = position_dodge(width = 0.3)) +
labs(
title = titlex ,
x = "Rater Gender",
y = "Probability Of No rating"
)+scale_y_continuous(
limits =   c(0,100))+
theme_minimal()
return (m)
}
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 16, height = 6)
plottingBar <- function(m,k) { # create a function with the name my_function
titlex=paste("Probability of No by Gender and ",k)
gr=m$data
gr1=gr[gr$effect2__=="No",]
nrc=length(unique(dices$rater_gender))*length(unique(dices[[k]]))
gr1=gr[1:nrc,]
m=ggplot(gr1, aes(x = rater_gender, y = estimate__*100, fill = !! sym(k), colour = !! sym(k))) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = lower__*100, ymax = upper__*100), width = 0.11, position = position_dodge(width = 0.3)) +
labs(
title = titlex ,
x = "Rater Gender",
y = "Probability Of No rating"
)+scale_y_continuous(
limits =   c(0,100))+
theme_minimal()
return (m)
}
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 16, height = 6)
plottingBar <- function(m,k) { # create a function with the name my_function
titlex=paste("Probability of No by rater_gender and ",k)
gr=m$data
gr1=gr[gr$effect2__=="No",]
nrc=length(unique(dices$rater_gender))*length(unique(dices[[k]]))
gr1=gr[1:nrc,]
m=ggplot(gr1, aes(x = rater_gender, y = estimate__*100, fill = !! sym(k), colour = !! sym(k))) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = lower__*100, ymax = upper__*100), width = 0.11, position = position_dodge(width = 0.3)) +
labs(
title = titlex ,
x = "Rater Gender",
y = "Probability Of No rating"
)+scale_y_continuous(
limits =   c(0,100))+
theme_minimal()
return (m)
}
plottingBar <- function(m,k) { # create a function with the name my_function
titlex=paste("Probability of No by rater_gender and ",k)
gr=m$data
gr1=gr[gr$effect2__=="No",]
nrc=length(unique(dices$rater_gender))*length(unique(dices[[k]]))
gr1=gr[1:nrc,]
m=ggplot(gr1, aes(x = rater_gender, y = estimate__*100, fill = !! sym(k), colour = !! sym(k))) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = lower__*100, ymax = upper__*100), width = 0.11, position = position_dodge(width = 0.3)) +
labs(
title = titlex ,
x = "Rater Gender",
y = "Probability Of No rating"
)+scale_y_continuous(
limits =   c(0,100))+
theme_minimal()
return (m)
}
######################################Model.Intersection.AD################
# rater_gender
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender",conditions = conditions)
m=plot(mod_plot)[[1]]+facet_wrap("rater_gender")
plotb=plottingBar(m,"rater_gender")
ggsave(filename = "rater_gender.jpeg", plot = plotb, width = 8, height = 6)
# rater-gender,rater-race
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 6, height = 6)
# rater_gender,rater-education
conditions <- expand.grid(rater_raw_race="White",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_education =unique(dices$rater_education))
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
m=plot(mod_plot)[[1]] + facet_wrap("rater_education")
plotb=plottingBar(m,"rater_education")
ggsave(filename = "rater_gender_and_rater_education.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,rater-age
conditions <- expand.grid(rater_education = "College degree or higher",rater_age=unique(dices$rater_age), rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
m=plot(mod_plot)[[1]] +facet_wrap("rater_age")
plotb=plottingBar(m,"rater_age")
ggsave(filename = "rater_gender_and_rater_age.jpeg", plot = plotb, width = 8, height = 6)
######################################Model.Intersection.QS################
# rater_gender
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender",conditions = conditions)
m=plot(mod_plot)[[1]]+facet_wrap("rater_gender")
plotb=plottingBar(m,"rater_gender")
ggsave(filename = "QS_rater_gender.jpeg", plot = plotb, width = 8, height = 6)
# rater-gender,rater-race
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "QS_rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,rater-education
conditions <- expand.grid(degree_of_harm="Moderate",rater_raw_race="White",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_education =unique(dices$rater_education))
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
m=plot(mod_plot)[[1]] + facet_wrap("rater_education")
plotb=plottingBar(m,"rater_education")
ggsave(filename = "QS_rater_gender_and_rater_education.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,rater-age
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age=unique(dices$rater_age), rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] + facet_wrap("rater_age")
plotb=plottingBar(m,"rater_age")
ggsave(filename = "QS_rater_gender_and_rater_age.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,degree of harm
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", degree_of_harm=unique(dices$degree_of_harm),rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
plot(mod_plot)[[1]] +facet_wrap("degree_of_harm")
plotb=plottingBar(m,"degree_of_harm")
ggsave(filename = "QS_rater_gender_and_degree_of_harm.jpeg", plot = plotb, width = 8, height = 6)
######################################Model.Intersection.QSGE################
# rater_gender
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender",conditions = conditions)
m=plot(mod_plot)[[1]]+facet_wrap("rater_gender")
plotb=plottingBar(m,"rater_gender")
ggsave(filename = "QSGE_rater_gender.jpeg", plot = plotb, width = 8, height = 6)
# rater-gender,rater-race
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "QSGE_rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,rater-education
conditions <- expand.grid(degree_of_harm="Moderate",rater_raw_race="White",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_education =unique(dices$rater_education))
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
m=plot(mod_plot)[[1]] + facet_wrap("rater_education")
plotb=plottingBar(m,"rater_age")
ggsave(filename = "QSGE_rater_gender_and_rater_education.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,rater-age
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age=unique(dices$rater_age), rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
m=plot(mod_plot)[[1]]+facet_wrap("rater_age")
plotb=plottingBar(m,"rater_age")
ggsave(filename = "QSGE_rater_gender_and_rater_age.jpeg", plot = plotb, width = 8, height = 6)
# rater_gender,degree of harm
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", degree_of_harm=unique(dices$degree_of_harm),rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("degree_of_harm")
plotb=plottingBar(m,"degree_of_harm")
ggsave(filename = "QSGE_rater_gender_and_degree_of_harm.jpeg", plot = plotb, width = 8, height = 6)
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "QS_rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 16, height = 8)
conditions <- expand.grid(degree_of_harm="Moderate",rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "QSGE_rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 16, height = 8)
# rater-gender,rater-race
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Model.intersectional.AD.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("rater_raw_race")
plotb=plottingBar(m,"rater_raw_race")
ggsave(filename = "rater_gender_and_rater_raw_race.jpeg", plot = plotb, width = 16, height = 8)
# rater_gender,rater-education
conditions <- expand.grid(degree_of_harm="Moderate",rater_raw_race="White",rater_age="gen x+", rater_gender =unique(dices$rater_gender),rater_education =unique(dices$rater_education))
mod_plot <- conditional_effects(Model.intersectional.QSGE.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
m=plot(mod_plot)[[1]] + facet_wrap("rater_education")
plotb=plottingBar(m,"rater_education")
ggsave(filename = "QSGE_rater_gender_and_rater_education.jpeg", plot = plotb, width = 8, height = 6)
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", degree_of_harm=unique(dices$degree_of_harm),rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
str(mod_plot)
plot(mod_plot)[[1]] +facet_wrap("degree_of_harm")
plotb=plottingBar(m,"degree_of_harm")
ggsave(filename = "QS_rater_gender_and_degree_of_harm.jpeg", plot = plotb, width = 8, height = 6)
View(m)
m[["data"]]
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", degree_of_harm=unique(dices$degree_of_harm),rater_gender =unique(dices$rater_gender),rater_raw_race="White")
mod_plot <- conditional_effects(Model.intersectional.QS.Gender,categorical = TRUE, effect ="rater_gender" , conditions = conditions)
m=plot(mod_plot)[[1]] +facet_wrap("degree_of_harm")
plotb=plottingBar(m,"degree_of_harm")
ggsave(filename = "QS_rater_gender_and_degree_of_harm.jpeg", plot = plotb, width = 8, height = 6)
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender ="Man",rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Modelraw.Intersectional.AD,categorical = TRUE, effect ="rater_raw_race",conditions = conditions)
plottingBar <- function(m,k) { # create a function with the name my_function
titlex=paste("Probability of No by rater_gender and ",k)
gr=m$data
gr1=gr[gr$effect2__=="No",]
nrc=length(unique(dices$rater_raw_race))*length(unique(dices[[k]]))
gr1=gr[1:nrc,]
m=ggplot(gr1, aes(x = rater_raw_race, y = estimate__*100, fill = !! sym(k), colour = !! sym(k))) +
geom_point(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = lower__*100, ymax = upper__*100), width = 0.11, position = position_dodge(width = 0.3)) +
labs(
title = titlex ,
x = "Rater Race",
y = "Probability Of No rating"
)+scale_y_continuous(
limits =   c(0,100))+
theme_minimal()
return (m)
}
######################################Model.Intersection.AD################
# rater_race
conditions <- expand.grid(rater_education = "College degree or higher",rater_age="gen x+", rater_gender ="Man",rater_raw_race=unique(dices$rater_raw_race))
mod_plot <- conditional_effects(Modelraw.Intersectional.AD,categorical = TRUE, effect ="rater_raw_race",conditions = conditions)
dices1=read.csv("diverse_safety_adversarial_dialog_350.csv")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(tidybayes)
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
# library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
library(loo)
# #########################Reading dices dataset#######################
dices1=read.csv("diverse_safety_adversarial_dialog_350.csv")
dices2=read.csv("diverse_safety_adversarial_dialog_990.csv")
colnm<-c("rater_id","rater_gender","rater_race","rater_raw_race","rater_age","phase","rater_education","item_id","degree_of_harm","Q_overall")
colnm2<-c("rater_id","rater_gender","rater_race","rater_race_raw","rater_age","phase","rater_education","item_id","degree_of_harm","Q_overall")
colnm3<-c("rater_id","rater_gender","rater_race","rater_raw_race","rater_age","phase","rater_education","item_id","degree_of_harm","Q_overall")
dices1<-dices1[colnm]
dices3<-dices2[colnm2]
colnames(dices3)<-colnm3
dices=rbind(dices1,dices3)
dices1=read.csv("diverse_safety_adversarial_dialog_350.csv")
dices2=read.csv("diverse_safety_adversarial_dialog_990.csv")
colnm<-c("rater_id","rater_gender","rater_race","rater_raw_race","rater_age","phase","rater_education","item_id","degree_of_harm","Q2_harmful_content_overall",
"Q3_bias_overall", "Q4_misinformation","Q_overall")
colnm2<-c("rater_id","rater_gender","rater_race","rater_race_raw","rater_age","phase","rater_education","item_id","degree_of_harm","Q2_harmful_content_overall",
"Q3_unfair_bias_overall", "Q4_misinformation_overall","Q_overall")
colnm3<-c("rater_id","rater_gender","rater_race","rater_raw_race","rater_age","phase","rater_education","item_id","degree_of_harm","Q2_harmful_content_overall",
"Q3_bias_overall", "Q4_misinformation","Q_overall")
dices1<-dices1[colnm]
dices3<-dices2[colnm2]
colnames(dices3)<-colnm3
dices3<-dices3[!(is.na(dices$degree_of_harm) | dices3$degree_of_harm==""), ]
dices<-rbind(dices1,dices3)
# ###################Turning Q_Overall rating to numeric from character################
dices<-dices %>% mutate(
rater_ethinicity = case_when(
rater_raw_race %in% c("White") ~ "White",
rater_raw_race %in% c(
"Asian", "East or South-East Asian") ~ "Asian",
rater_raw_race %in% c("Black or African American") ~ "Black",
rater_raw_race %in% c(
"Indian",
"Indian subcontinent (including Bangladesh, Bhutan, India, Maldives, Nepal, Pakistan, and Sri Lanka)"
) ~ "Indian Subcontinent",
rater_raw_race %in% c(
"American Indian or Alaska Native",
"LatinX, Latino, Hispanic or Spanish Origin, American Indian or Alaska Native",
"LatinX, Latino, Hispanic or Spanish Origin, Mexican Indigenous",
"Native Hawaiian or other Pacific Islander",
"White, American Indian or Alaska Native"
) ~ "Indigenous",
rater_raw_race %in% c(
"Latino, Hispanic or Spanish Origin",
"LatinX, Latino, Hispanic or Spanish Origin") ~ "Latin(x)e",
rater_raw_race %in% c(
"Black or African American, East or South-East Asian",
"LatinX, Latino, Hispanic or Spanish Origin, East or South-East Asian",
"White, East or South-East Asian",
"White, LatinX, Latino, Hispanic or Spanish Origin",
"Mixed") ~ "Multiracial",
rater_raw_race %in% c(
"Middle Eastern or North African",
"Other",
"Prefer not to answer",
""
) ~ "Other"
)
) %>%
# make white people the reference group
mutate(rater_ethinicity = relevel(factor(rater_ethinicity), "White"))
dices$Q_overall <- factor(dices$Q_overall, levels = c("No", "Unsure", "Yes"), ordered = TRUE)
###################Modelraws###########################
View(dices)
